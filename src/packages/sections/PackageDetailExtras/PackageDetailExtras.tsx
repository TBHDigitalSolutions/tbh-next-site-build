// src/packages/sections/PackageDetailExtras/PackageDetailExtras.tsx

"use client";

import * as React from "react";
import Divider from "@/components/ui/atoms/Divider/Divider";
import styles from "./PackageDetailExtras.module.css";

export type TimelineItem = {
  /** Short title of the step, e.g., "Setup" */
  title: string;
  /** Supporting detail, e.g., "3–5 business days" */
  note?: string;
  /** Optional id (autogenerated otherwise) */
  id?: string;
};

export type LegacyTimeline = {
  setup?: string;
  launch?: string;
  ongoing?: string;
};

export type PackageDetailExtrasProps = {
  /**
   * New flexible timeline blocks (1–5).
   * If omitted, we’ll try to derive from `timeline` (legacy shape).
   */
  timelineBlocks?: TimelineItem[];

  /**
   * Legacy timeline shape (optional).
   * If `timelineBlocks` is provided, it wins.
   */
  timeline?: LegacyTimeline;

  /**
   * Optional Limits & Ethics bullets. Renders only if non-empty.
   */
  ethics?: string[];

  /** Headings (customizable / i18n-ready) */
  timelineHeading?: string; // default: "Timeline & Turnaround"
  ethicsHeading?: string;   // default: "Limits & Ethics"

  /** Styling hooks */
  className?: string;
  style?: React.CSSProperties;

  /** Testing / a11y */
  id?: string;
  "data-testid"?: string;
  ariaLabel?: string;
};

export default function PackageDetailExtras({
  timelineBlocks,
  timeline,
  ethics,
  timelineHeading = "Timeline & Turnaround",
  ethicsHeading = "Limits & Ethics",
  className,
  style,
  id,
  "data-testid": testId = "package-detail-extras",
  ariaLabel,
}: PackageDetailExtrasProps) {
  // --- Normalize the timeline into a 1–5 step array ---
  const steps: TimelineItem[] = React.useMemo(() => {
    const direct = (timelineBlocks ?? [])
      .filter(Boolean)
      .map((b) => ({
        title: (b?.title ?? "").trim(),
        note: b?.note?.trim(),
        id: b?.id,
      }))
      .filter((b) => b.title.length > 0);

    if (direct.length > 0) return direct.slice(0, 5);

    // Legacy fallbacks
    const derived: TimelineItem[] = [];
    if (timeline?.setup) derived.push({ title: "Setup", note: timeline.setup });
    if (timeline?.launch) derived.push({ title: "Launch", note: timeline.launch });
    if (timeline?.ongoing) derived.push({ title: "Ongoing", note: timeline.ongoing });

    return derived.slice(0, 5);
  }, [timelineBlocks, timeline]);

  const hasTimeline = steps.length > 0;
  const hasEthics = (ethics?.filter(Boolean).length ?? 0) > 0;

  if (!hasTimeline && !hasEthics) return null;

  return (
    <section
      id={id}
      className={[styles.wrap, className].filter(Boolean).join(" ")}
      style={style}
      aria-label={ariaLabel ?? "Additional package details"}
      data-testid={testId}
    >
      {/* ============================== TIMELINE ============================== */}
      {hasTimeline && (
        <div className={styles.block} aria-label="Timeline / Turnaround">
          <h2 className={styles.heading}>{timelineHeading}</h2>
          <Divider />

          <ol className={styles.timeline} aria-label="Project timeline">
            {steps.map((step, i) => {
              const key = step.id ?? `${step.title}-${i}`;
              const index = i + 1;
              const isLast = i === steps.length - 1;
              return (
                <React.Fragment key={key}>
                  <li className={styles.step} aria-label={`${step.title}${step.note ? ` — ${step.note}` : ""}`}>
                    <div className={styles.stepCard}>
                      <div className={styles.stepIndex} aria-hidden="true">{index}</div>
                      <div className={styles.stepBody}>
                        <div className={styles.stepTitle}>{step.title}</div>
                        {step.note ? <p className={styles.stepNote}>{step.note}</p> : null}
                      </div>
                    </div>
                  </li>

                  {/* Connector (arrow) between steps */}
                  {!isLast && (
                    <li className={styles.connector} aria-hidden="true">
                      <span className={styles.line}></span>
                      <span className={styles.chevron}></span>
                    </li>
                  )}
                </React.Fragment>
              );
            })}
          </ol>
        </div>
      )}

      {/* =========================== LIMITS & ETHICS ========================== */}
      {hasEthics && (
        <div className={styles.block} aria-label="Limits and Ethics">
          <h2 className={styles.heading}>{ethicsHeading}</h2>
          <Divider />
          <ul className={styles.ethicsList}>
            {ethics!.filter(Boolean).map((e, i) => (
              <li key={`ethic-${i}`}>{e}</li>
            ))}
          </ul>
        </div>
      )}
    </section>
  );
}
