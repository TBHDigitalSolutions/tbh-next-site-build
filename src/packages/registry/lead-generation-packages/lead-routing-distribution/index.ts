// src/packages/registry/lead-generation-packages/lead-routing-distribution/index.ts
/**
 * Lead Routing & Distribution — Type-Safe Loader
 * =============================================================================
 * PURPOSE
 * -----------------------------------------------------------------------------
 * Loads the MDX-derived JSON for this package and **validates** it against the
 * canonical Zod schema. On success, it exports a fully type-safe object that
 * your mappers and TSX components can consume without additional guards.
 *
 * INPUTS (Generated at build time)
 * -----------------------------------------------------------------------------
 * - ./content.generated.json
 *     Emitted by your MDX → JSON build step from:
 *       src/content/packages/lead-generation/lead-routing-distribution/content.mdx
 *
 * OUTPUTS
 * -----------------------------------------------------------------------------
 * - `base` (named export)  : strongly typed `PackageMetadata`
 * - `default` (default exp): same as `base` (convenience / legacy imports)
 *
 * RUNTIME BEHAVIOR
 * -----------------------------------------------------------------------------
 * - Uses `PackageSchema.parse(...)` to validate and coerce the raw JSON.
 * - Throws a developer-friendly error (with exact field paths) on validation
 *   failure so content mistakes are caught during build/SSR.
 *
 * REQUIREMENTS
 * -----------------------------------------------------------------------------
 * - tsconfig.json must enable: `"resolveJsonModule": true`, `"esModuleInterop": true`.
 * - Do **not** mutate `base`. Treat it as an immutable single source of truth.
 *
 * RELATED FILES
 * -----------------------------------------------------------------------------
 * - src/packages/lib/package-schema.ts   → Zod schema (SSOT for shapes)
 * - src/types/package.ts                 → Types inferred from the schema
 * - src/packages/lib/registry/mappers.ts → Maps validated content → UI props
 */

import raw from "./content.generated.json"; // ← Generated by your MDX pipeline - emitted by your MDX build processor
import { PackageSchema } from "@/packages/lib/schemas/package-schema";
import type { PackageMetadata } from "@/types/package";
import { ZodError } from "zod";

/** Small helper: pretty-print a ZodError for authoring/debugging. */
function formatZodError(e: ZodError): string {
  const issues = e.issues
    .map((iss, i) => {
      const path = iss.path?.length ? iss.path.join(" → ") : "(root)";
      // e.g., "[1] price.oneTime → Expected number, received string"
      return `  [${i + 1}] ${path}: ${iss.message}`;
    })
    .join("\n");
  return `Invalid package content for "lead-routing-distribution".\n` +
    `Please fix the MDX frontmatter/body so it matches PackageSchema.\n\n` +
    `Reasons:\n${issues}\n\n` +
    `Source file(s):\n` +
    `  - content.mdx               → src/content/packages/lead-generation/lead-routing-distribution/content.mdx\n` +
    `  - content.generated.json    → src/packages/registry/lead-generation-packages/lead-routing-distribution/content.generated.json\n` +
    `Schema: src/packages/lib/package-schema.ts`;
}

/**
 * Validate and export the canonical package record.
 * We keep the try/catch here to surface **actionable** authoring errors during
 * build/SSR instead of opaque 500s.
 */
let validated: PackageMetadata;
try {
  validated = PackageSchema.parse(raw);
} catch (err) {
  if (err instanceof ZodError) {
    // Emit a clean, multi-line error that points directly to bad fields.
    // Throwing here intentionally fails the build/SSR for safety.
    throw new Error(formatZodError(err));
  }
  // Non-Zod errors (rare: corrupt JSON, bad import, etc.)
  throw err;
}

/**
 * Export the validated, immutable package object.
 * Consumers should avoid mutating this object (treat as read-only SSOT).
 */
export const base: PackageMetadata = validated;

/**
 * Default export for convenience / legacy import paths:
 *   import base from "@/packages/registry/lead-generation-packages/lead-routing-distribution";
 */
export default base;

/* -----------------------------------------------------------------------------
 * OPTIONAL: tiny debug aid (tree-shakeable in production)
 * Uncomment if you want a quick sanity check during local development.
 *
 * if (process.env.NODE_ENV !== "production") {
 *   // eslint-disable-next-line no-console
 *   console.debug("[lead-routing-distribution] validated", {
 *     id: base.id,
 *     slug: base.slug,
 *     hasIncludes: Array.isArray(base.includes) && base.includes.length > 0,
 *   });
 * }
 * --------------------------------------------------------------------------- */
