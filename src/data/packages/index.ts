// src/data/packages/index.ts
/**
 * Runtime data entrypoint for all generated package JSON.
 * -----------------------------------------------------------------------------
 * Everything in `__generated__/**` is machine-written by scripts.
 * This file provides typed accessors and safe dynamic loaders.
 *
 * Usage (hub):
 *   import { catalog, cards } from "@/data/packages";
 *
 * Usage (detail lazy import by slug):
 *   const base = await loadPackageRaw(slug); // returns the generated JSON (snake_case)
 *   // Recommended: parse with your Zod runtime schema before use
 */

import type { PackageData as RuntimeCamel } from "@/packages/lib/package-schema"; // if/when you parse to camelCase
import type { Money } from "@/packages/lib/pricing";

/* -----------------------------------------------------------------------------
 * Lightweight shapes used by hub/search/cards
 * --------------------------------------------------------------------------- */

/** Row shape for `__generated__/index.json` (keep tiny for hub & filters). */
export type CatalogRow = {
  id: string;
  slug: string;
  service: string;
  name: string;
  tier?: string;
  summary: string;
  tags?: string[];
  badges?: string[];
  has_price: boolean;
};

/** Map for `__generated__/routes.json`: slug → ESM path for lazy import. */
export type RoutesMap = Record<string, string>;

/** Row shape for `__generated__/cards.json`. */
export type CardRow = {
  slug: string;
  title: string;
  summary?: string;
  badges?: string[];
  tags?: string[];
  image?: { src: string; alt: string };
  priceTeaser?: string;
};

/** Aggregated authoring issues per slug (optional). */
export type HealthReport = {
  summary: { errors: number; warnings: number };
  items: Array<{
    slug: string;
    errors: string[];
    warnings: string[];
  }>;
};

/** Simple per-slug content hash cache (optional). */
export type Hashes = Record<string, string>;

/** Optional unified search index (flattened for client search). */
export type UnifiedSearchIndex = {
  version: number;
  items: Array<{
    slug: string;
    title: string;
    service: string;
    tier?: string;
    summary?: string;
    tags?: string[];
    badges?: string[];
  }>;
};

/* -----------------------------------------------------------------------------
 * Static imports (assumes your build has already generated these files).
 * If you boot the repo before running the generator, comment these out and
 * use the async loaders below. With `resolveJsonModule` enabled, TS can import JSON.
 * --------------------------------------------------------------------------- */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - these files are generated by scripts before build
import catalogJson from "./__generated__/index.json";
// @ts-ignore
import routesJson from "./__generated__/routes.json";
// @ts-ignore
import cardsJson from "./__generated__/cards.json";
// @ts-ignore
import healthJson from "./__generated__/health.json";
// @ts-ignore
import hashesJson from "./__generated__/hashes.json";

export const catalog = catalogJson as CatalogRow[];
export const routes = routesJson as RoutesMap;
export const cards = cardsJson as CardRow[];
export const health = (healthJson as HealthReport) ?? {
  summary: { errors: 0, warnings: 0 },
  items: [],
};
export const hashes: Hashes = (hashesJson as Hashes) ?? {};

/* -----------------------------------------------------------------------------
 * Async loaders (safe when files may be missing during initial bootstrap)
 * --------------------------------------------------------------------------- */

/** Load the unified search index if present. Returns null if missing. */
export async function loadUnifiedSearch(): Promise<UnifiedSearchIndex | null> {
  try {
    const mod = await import("./__generated__/search/unified.search.json");
    return (mod as any).default as UnifiedSearchIndex;
  } catch {
    return null;
  }
}

/**
 * Load the raw generated JSON for a single package (snake_case).
 * This returns the machine-written “Package Data File” from `__generated__/packages/<slug>.json`.
 * Parse with your runtime Zod schema after any snake→camel transform.
 */
export async function loadPackageRaw<T = unknown>(slug: string): Promise<T> {
  const mod = await import(`./__generated__/packages/${slug}.json`);
  return (mod as any).default as T;
}

/* -----------------------------------------------------------------------------
 * Optional helper: narrow a card row from a catalog row (runtime convenience)
 * --------------------------------------------------------------------------- */

export function toCardFromCatalog(row: CatalogRow): CardRow {
  return {
    slug: row.slug,
    title: row.name,
    summary: row.summary,
    badges: row.badges,
    tags: row.tags,
  };
}

/* -----------------------------------------------------------------------------
 * Optional types when you later parse to the camelCase runtime model.
 * Keep here for convenience if some callers want a typed promise signature.
 * --------------------------------------------------------------------------- */

export type PackageBase = RuntimeCamel;
export type { Money };